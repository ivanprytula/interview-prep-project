name: Django CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      max-parallel: 3
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
      #----------------------------------------------
      #       check-out repo and set up python
      #----------------------------------------------
    - name: Check out the repository
      uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    #----------------------------------------------
    #  -----  install & configure poetry  -----
    #----------------------------------------------
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest            # default value
        virtualenvs-create: true   # default value
        virtualenvs-in-project: true
        installer-parallel: true   # default value
    #----------------------------------------------
    #       load cached venv if cache exists
    #----------------------------------------------
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    #----------------------------------------------
    # Install dependencies if the cache does not exist
    #----------------------------------------------
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      # install only the dependencies and not including the current project - add --no-root
      run: poetry install --no-interaction --no-root    
    - name: Run tests
      run: |
        source .venv/bin/activate
        pytest tests/
        # coverage report
