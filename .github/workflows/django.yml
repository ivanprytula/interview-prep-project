name: "CI - test"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  POETRY_VERSION: "1.5.1"

jobs:
  test:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      max-parallel: 2
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
      #----------------------------------------------
      #       check-out repo and set up python
      #----------------------------------------------
    - name: Check out the repository
      uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    # https://jacobian.org/til/github-actions-poetry/
    # TODO: consider profit of this step

    # Cache the installation of Poetry itself, e.g. the next step. This prevents the workflow
    # from installing Poetry every time, which can be slow.
    # - name: Cache Poetry installation
    #   uses: actions/cache@v3
    #   with:
    #     path: ~/.cache/pypoetry
    #     key: poetry-cache-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ env.POETRY_VERSION }}

    #----------------------------------------------
    #  -----  install & configure poetry  -----
    #----------------------------------------------
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.5.1
        virtualenvs-create: true   # default value
        virtualenvs-in-project: true
        installer-parallel: true   # default value
    #----------------------------------------------
    #       load cached venv if cache exists
    #----------------------------------------------
    - name: Load cached deps from venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    #----------------------------------------------
    # Install dependencies if the cache does not exist
    #----------------------------------------------
    - name: Install dependencies
      # Install dependencies. `--no-root` means "install all dependencies but not the project
      # itself", which is what you want to avoid caching _your_ code. The `if` statement
      # ensures this only runs on a cache miss.
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    # Now install _your_ project. This isn't necessary for many types of projects -- particularly
    # things like Django apps don't need this. But it's a good idea since it fully-exercises the
    # pyproject.toml and makes that if you add things like console-scripts at some point that
    # they'll be installed and working.
    # - run: poetry install --no-interaction

    - name: Run tests
      # - run: poetry run pytest  # one-liner
      run: |
        source $VENV
        pytest tests/
        # coverage report
